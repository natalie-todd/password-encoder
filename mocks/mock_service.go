// Code generated by MockGen. DO NOT EDIT.
// Source: service/service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	service "password-encoder/service"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// CalculateHashAndDuration mocks base method.
func (m *MockServicer) CalculateHashAndDuration(startTime time.Time, fiveSecTimer *time.Timer, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CalculateHashAndDuration", startTime, fiveSecTimer, password)
}

// CalculateHashAndDuration indicates an expected call of CalculateHashAndDuration.
func (mr *MockServicerMockRecorder) CalculateHashAndDuration(startTime, fiveSecTimer, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateHashAndDuration", reflect.TypeOf((*MockServicer)(nil).CalculateHashAndDuration), startTime, fiveSecTimer, password)
}

// CalculateStats mocks base method.
func (m *MockServicer) CalculateStats() *service.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateStats")
	ret0, _ := ret[0].(*service.Stats)
	return ret0
}

// CalculateStats indicates an expected call of CalculateStats.
func (mr *MockServicerMockRecorder) CalculateStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateStats", reflect.TypeOf((*MockServicer)(nil).CalculateStats))
}

// GetHashedPasswords mocks base method.
func (m *MockServicer) GetHashedPasswords() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPasswords")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetHashedPasswords indicates an expected call of GetHashedPasswords.
func (mr *MockServicerMockRecorder) GetHashedPasswords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPasswords", reflect.TypeOf((*MockServicer)(nil).GetHashedPasswords))
}
